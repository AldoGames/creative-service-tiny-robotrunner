game.GameService = function() {
    // @note these will be part of 'game.GameConfig in the future
    this.scrollSpeed = 0;
    this.score = 0;
    this.highScore = 0;
};
game.GameService.prototype = Object.create(null);
game.GameService.prototype.constructor = game.GameService;

game.GameService.prototype.getGameManager = function() {
    return world.getByName('GameManager').getComponent(game.GameManager);
}

game.GameService.prototype.clear = function () {

    // @fix since the tweening system does handle destroyed objects yet...
    Tween.destroyAll(world.getByName("GameOver"));
    //Tween.destroyAll(world.getByName("ScoreBoard"));

    ut.Flow.Service.destroyAll('game.GameScene');
    //ut.Flow.Service.destroyAll('game.Score');
    ut.Flow.Service.destroyAll('game.GameOver');
    //ut.Flow.Service.destroyAll('game.Pipes');

    console.log("clear world.entityCount:" + world.entityCount());

    world.forEachEntity(function(entity){
        console.log("entity:" + entity.name());
    });
}

/**
 * @desc starts a new game
 */
game.GameService.prototype.newGame = function() {
    // clear all world objects
    this.clear();

    // create a new game scene and score
    ut.Flow.Service.instantiate('game.GameScene');
    //ut.Flow.Service.instantiate('game.Score');

    // reset the score
    this.score = 0;

    // start scrolling the world
    this.scrollSpeed = this.getGameManager().scrollSpeed();

    this.getGameManager().setState(game.GameState.Play);

    console.log("newGame world.entityCount:" + world.entityCount());
};

/**
 * @desc ends the current game and shows the scoreboard
 */
game.GameService.prototype.gameOver = function() {

    // hide the score view
    //ut.Flow.Service.destroyAll('game.Score');

    // pause the pipe spawner
    //world.getByName('PipeSpawner').getComponent(game.PipeSpawner).setPaused(true);

    // stop scrolling the world
    this.scrollSpeed = 0;

    // update the highscore
    if (this.score > this.highScore) {
        this.highScore = this.score;
    }

    // show the game over view
    ut.Flow.Service.instantiate('game.GameOver');
/*
    // tween in the game over text, position and alpha
    var entity = world.getByName("GameOver");
    var transform = entity.getComponent(ut.Core2D.Transform);
    var end = transform.localPosition();
    var start = new Vector3(end.x, end.y + 40, end.z);
    transform.tween("localPosition", start, end)
             .setDuration(0.35)
             .setEase(ut.tween.EaseType.EaseOutBounce);
    var renderer = entity.getComponent(ut.Core2D.Sprite2DRenderer);
    renderer.tween("color.a", 0, 1)
            .setDuration(0.25);

    // tween in the score board from the bottom
    var entity = world.getByName("ScoreBoard");
    var transform = entity.getComponent(ut.Core2D.Transform);
    var end = transform.localPosition();
    var start = new Vector3(end.x, end.y - 200, end.z);
    transform.tween("localPosition", start, end)
             .setDuration(0.35)
             .setEase(ut.tween.EaseType.EaseOutQuad);

    // disable collision for the pipes
    world.forEachEntity([game.DisableCollisionOnGameOver, ut.Physics2D.RectCollider], 
        function (entity, disable, collider) {
            entity.removeComponent(ut.Physics2D.RectCollider);
        }
    );
    */
};

/**
 * @type {game.GameService}
 * @desc Singleton game instance
 */
var Game = new game.GameService();